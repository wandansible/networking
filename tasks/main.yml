---

- name: Install bridge-utils package if bridges are configured
  ansible.builtin.apt:
    pkg:
      - bridge-utils
    install_recommends: false
  when: "network_interfaces | selectattr('bridge_ports', 'defined') | list"

- name: Check for netplan
  ansible.builtin.stat:
    path: /usr/sbin/netplan
  register: check_for_netplan

- name: Get wireless devices
  ansible.builtin.shell: >-
    set -euo pipefail

    while read -r iface_dir; do
      if [ -e "${iface_dir}/phy80211" ]; then
        basename "${iface_dir}"
      fi
    done <<< "$(find /sys/class/net/ -mindepth 1 -maxdepth 2)"
  args:
    executable: /bin/bash
  changed_when: false
  register: _wireless_device_paths

- name: Get network namespaces
  ansible.builtin.find:
    paths: /run/netns/
  register: _network_namespace_dirs

- name: Set network namespaces fact
  ansible.builtin.set_fact:
    network_namespaces: >-
      {{ _network_namespace_dirs.files | map(attribute="path") | map("basename") }}

- name: Get wireless devices in network namespaces
  ansible.builtin.shell: >-
    set -euo pipefail

    ip netns exec "{{ item }}" bash -c '
      set -euo pipefail

      while read -r iface_dir; do
        if [ -e "${iface_dir}/phy80211" ]; then
          basename "${iface_dir}"
        fi
      done <<< "$(find /sys/class/net/ -mindepth 1 -maxdepth 2)"'
  args:
    executable: /bin/bash
  loop: "{{ network_namespaces }}"
  changed_when: false
  register: _netns_wireless_device_path_cmd

- name: Set wireless device facts
  ansible.builtin.set_fact:
    wireless_devices: >-
      {{ (
           _wireless_device_paths.stdout_lines
           +
           (_netns_wireless_device_path_cmd.results | map(attribute="stdout_lines") | flatten)
         ) | map("basename") | sort }}

- name: Configure wireless devices
  ansible.builtin.include_tasks:
    file: wifi.yml
  when: "wireless_devices | length > 0"

- name: Configure networking interfaces with ifupdown
  ansible.builtin.include_tasks:
    file: ifupdown.yml
  when: "not check_for_netplan.stat.exists"

- name: Configure networking interfaces with netplan
  ansible.builtin.include_tasks:
    file: netplan.yml
  when: "check_for_netplan.stat.exists"

- name: Set networking facts
  ansible.builtin.import_tasks: facts.yml

- name: Tune network options
  ansible.builtin.include_tasks:
    file: tuning.yml
  when: network_tune
